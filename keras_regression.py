# -*- coding: utf-8 -*-
"""Keras-Regression

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kzEBDoazrBpdMILMy_K7qtsJypzzotDT
"""

from keras.models import *
from keras.layers import *
from sklearn.datasets import load_iris, fetch_california_housing
from sklearn.model_selection import *
from sklearn.preprocessing import *
from keras.callbacks import *
import os
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
trp = "/content/sample_data/california_housing_train.csv"
df = pd.read_csv(trp)

!rm -rf ./my_logs/
!mkdir my_logs 
df.info()

df

plt.figure(figsize=(10,10))
sns.heatmap(df.corr(),mask=np.triu(df.corr()),square=True,annot=True)
plt.xticks(rotation=45)

sns.boxplot(data=df)
plt.xticks(rotation=45)

sns.distplot(df['median_house_value'])

root_logdir = os.path.join(os.curdir, "my_logs")
def get_run_logdir():
  import time
  run_id = time.strftime("run_%Y_%m_%d-%H_%M_%S")
  return os.path.join(root_logdir, run_id)
get_run_logdir()



features = df.copy()
target = features.pop("median_house_value")
from sklearn.preprocessing import *
rob = RobustScaler() # normalizes shape
rob_features = rob.fit_transform(features)

sc = StandardScaler() # scales
sc_features = sc.fit_transform(rob_features)
sc_features.mean()

X_train_full, X_test, y_train_full, y_test = train_test_split(sc_features,target,test_size=.33,random_state=42)
X_train, X_valid, y_train, y_valid = train_test_split(X_train_full, y_train_full)
# scaler = StandardScaler()
# X_train_scaled = scaler.fit_transform(X_train)
# X_valid_scaled = scaler.transform(X_valid)
# X_test_scaled = scaler.transform(X_test)

X_train.shape

"""# ML Model"""

from sklearn.linear_model import *
lr = LinearRegression()
lr.fit(X_train,y_train)

"""#evaluate the model (intercept and slope)

"""

print(lr.intercept_)
print(lr.coef_)

"""#predicting the test set result

"""

y_pred = lr.predict(X_test)
#put results as a DataFrame
coeff_df = pd.DataFrame(lr.coef_, df.drop('median_house_value',axis =1).columns, columns=['Coefficient']) 
coeff_df
sns.distplot((y_test-y_pred))

"""# evaluate the performance of the algorithm (MAE - MSE - RMSE)

"""

from sklearn import metrics

print('MAE:', metrics.mean_absolute_error(y_test, y_pred))  
print('MSE:', metrics.mean_squared_error(y_test, y_pred))  
print('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))
print('VarScore:',metrics.explained_variance_score(y_test,y_pred))
print("r2: ",metrics.r2_score(y_test,y_pred))

"""## Keras Model"""

model = Sequential()

model.add(Dense(20,activation="elu",input_dim=8))
model.add(Dense(10,activation="elu"))
model.add(Dense(5,activation="elu"))

model.add(Dense(1))

model.compile(optimizer='adam',loss="mse")
run_logdir = get_run_logdir()
tensorboard_cb = TensorBoard(run_logdir)

model.fit(X_train, y_train, callbacks=[tensorboard_cb] , epochs=200 , validation_data=(X_valid,y_valid))

#get_ipython().system_raw('tensorboard --logdir=./my_logs --port=6006 &')

# os.system("pip install pyngrok")
# from pyngrok import ngrok
# print(ngrok.connect(6006,"http"))

# !tensorboard --logdir=./my_logs --port=6006

model.evaluate(X_test,y_test)

y_pred = model.predict(X_test)
print('MAE:', metrics.mean_absolute_error(y_test, y_pred))  
print('MSE:', metrics.mean_squared_error(y_test, y_pred))  
print('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))
print('VarScore:',metrics.explained_variance_score(y_test,y_pred))

print("r2: ",metrics.r2_score(y_test,y_pred))

# Visualizing Our predictions
fig = plt.figure(figsize=(10,5))
plt.scatter(y_test,y_pred)
# Perfect predictions
plt.plot(y_test,y_test,'r')





